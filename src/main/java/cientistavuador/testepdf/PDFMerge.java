package cientistavuador.testepdf;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

/**
 *
 * @author Cien
 */
public class PDFMerge extends javax.swing.JFrame {

    @SuppressWarnings("serial")
    public class FileListTransferHandler extends TransferHandler {

        public FileListTransferHandler() {
            super(null);
        }

        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.LINK;
        }

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
        }

        @SuppressWarnings("unchecked")
        @Override
        public boolean importData(TransferSupport support) {
            if (PDFMerge.this.futurePdf != null) {
                return false;
            }
            DataFlavor[] flavors = support.getTransferable().getTransferDataFlavors();
            boolean found = false;
            for (DataFlavor e : flavors) {
                if (e.equals(DataFlavor.javaFileListFlavor)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
            try {
                List<File> files = (List<File>) support.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                for (File f : files) {
                    DefaultListModel<String> model = (DefaultListModel<String>) PDFMerge.this.filesList.getModel();
                    if (!f.exists()) {
                        continue;
                    }
                    if (!f.isFile()) {
                        continue;
                    }
                    String name = f.getName().toLowerCase();
                    if (!name.endsWith(".pdf") && !name.endsWith(".png") && !name.endsWith(".jpg") && !name.endsWith(".jpeg")) {
                        continue;
                    }
                    if (model.isEmpty()) {
                        PDFMerge.this.save.setEnabled(true);
                        PDFMerge.this.clear.setEnabled(true);
                        PDFMerge.this.clearAll.setEnabled(true);
                    }
                    model.addElement(f.getAbsolutePath());
                }
                return true;
            } catch (UnsupportedFlavorException | IOException ex) {
                ex.printStackTrace(System.out);
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
        }
    }

    private transient Future<Void> futurePdf = null;

    /**
     * Creates new form PDFMerge
     */
    public PDFMerge() {
        initComponents();
    }

    public void init() {
        this.filesList.setModel(new DefaultListModel<>());
        this.filesList.setTransferHandler(new FileListTransferHandler());
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList<>();
        clear = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        save = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        marginBox = new javax.swing.JComboBox<>();
        upscaleBox = new javax.swing.JComboBox<>();
        rotationBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDF e Imagem para PDF");
        setResizable(false);

        jScrollPane1.setViewportView(filesList);

        clear.setText("Limpar");
        clear.setEnabled(false);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        clearAll.setText("Limpar Tudo");
        clearAll.setEnabled(false);
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        save.setText("Salvar");
        save.setEnabled(false);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        marginBox.setModel(new DefaultComboBoxModel<Margin>(Margin.values()));
        marginBox.setSelectedItem(Margin.DEFAULT);

        upscaleBox.setModel(new DefaultComboBoxModel<Upscale>(Upscale.values()));
        upscaleBox.setSelectedItem(Upscale.DOWNSCALE_IF_NEEDED);

        rotationBox.setModel(new DefaultComboBoxModel<Rotation>
            (Rotation.values())
        );
        rotationBox.setSelectedItem(Rotation.DO_NOT_ROTATE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(marginBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save))
                    .addComponent(upscaleBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rotationBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clear)
                        .addComponent(clearAll)
                        .addComponent(save))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(marginBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upscaleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        DefaultListModel<String> model = (DefaultListModel<String>) this.filesList.getModel();
        if (model.isEmpty()) {
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        int[] indicesToRemove = this.filesList.getSelectedIndices();
        if (indicesToRemove.length == 0) {
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        Object[] values = model.toArray();
        for (int i : indicesToRemove) {
            values[i] = null;
        }
        model.clear();
        for (Object s : values) {
            if (s == null) {
                continue;
            }
            model.addElement(s.toString());
        }
        if (model.isEmpty()) {
            this.save.setEnabled(false);
            this.clear.setEnabled(false);
            this.clearAll.setEnabled(false);
        }
    }//GEN-LAST:event_clearActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        DefaultListModel<String> model = (DefaultListModel<String>) this.filesList.getModel();
        if (model.isEmpty()) {
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        model.clear();
        this.save.setEnabled(false);
        this.clear.setEnabled(false);
        this.clearAll.setEnabled(false);
    }//GEN-LAST:event_clearAllActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        this.save.setEnabled(false);
        Object[] inputString = ((DefaultListModel<String>) this.filesList.getModel()).toArray();
        List<File> input = new ArrayList<>();
        for (Object o : inputString) {
            File f = new File(o.toString());
            if (!f.exists()) {
                continue;
            }
            if (!f.isFile()) {
                continue;
            }
            input.add(f);
        }
        if (input.isEmpty()) {
            this.save.setEnabled(true);
            Toolkit.getDefaultToolkit().beep();
            return;
        }

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setFileFilter(new FileNameExtensionFilter("PDF", "pdf", "PDF"));
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            this.save.setEnabled(true);
            return;
        }
        File output = chooser.getSelectedFile().getAbsoluteFile();
        if (!output.getName().toLowerCase().endsWith(".pdf")) {
            output = new File(output.getParent(), output.getName() + ".pdf");
        }

        final File[] inputArray = input.toArray(File[]::new);
        final File outputFile = output;
        final Margin margin = (Margin) this.marginBox.getSelectedItem();
        final Upscale scale = (Upscale) this.upscaleBox.getSelectedItem();
        final Rotation rotation = (Rotation) this.rotationBox.getSelectedItem();

        this.futurePdf = CompletableFuture.runAsync(() -> {
            try {
                save(inputArray, outputFile, margin, scale, rotation);
                SwingUtilities.invokeLater(() -> {
                    saveFinished();
                });
            } catch (Exception ex) {
                SwingUtilities.invokeLater(() -> {
                    saveFailed(ex);
                });
            }
        });
    }//GEN-LAST:event_saveActionPerformed

    private void saveFailed(Exception ex) {
        ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
        PrintStream messageStream = new PrintStream(byteArray);
        ex.printStackTrace(messageStream);
        messageStream.flush();

        String message = new String(byteArray.toByteArray(), StandardCharsets.UTF_8);
        System.out.println(message);

        Toolkit.getDefaultToolkit().beep();
        JOptionPane.showMessageDialog(
                this,
                message,
                "Erro",
                JOptionPane.ERROR_MESSAGE
        );

        saveFinished();
    }

    private void saveFinished() {
        this.progressBar.setValue(0);
        this.save.setEnabled(true);
        this.futurePdf = null;
    }

    private void save(File[] input, File outputFile, Margin margin, Upscale upscaleEnum, Rotation rotation) throws Exception {
        PDFMergerUtility utility = new PDFMergerUtility();

        float currentProgress = 0f;
        float progressStep = 100f / (input.length * 2);

        try (PDDocument outputDocument = new PDDocument()) {
            Object[] inputObjects = new Object[input.length];
            for (int i = 0; i < input.length; i++) {
                File f = input[i];
                if (f.getName().toLowerCase().endsWith(".pdf")) {
                    inputObjects[i] = Loader.loadPDF(f);
                } else {
                    if (Rotation.ROTATE_90.equals(rotation) || Rotation.ROTATE_90_CW.equals(rotation)) {
                        BufferedImage inputImage = ImageIO.read(f);
                        boolean cw = Rotation.ROTATE_90_CW.equals(rotation);

                        float conversionProgress = 0f;
                        float conversionStep = 100f / inputImage.getWidth();

                        BufferedImage outputImage = new BufferedImage(inputImage.getHeight(), inputImage.getWidth(), BufferedImage.TYPE_INT_ARGB);
                        for (int x = 0; x < inputImage.getWidth(); x++) {
                            for (int y = 0; y < inputImage.getHeight(); y++) {
                                if (cw) {
                                    outputImage.setRGB(y, (inputImage.getWidth() - 1) - x, inputImage.getRGB(x, y));
                                } else {
                                    outputImage.setRGB((inputImage.getHeight() - 1) - y, x, inputImage.getRGB(x, y));
                                }
                            }

                            conversionProgress += conversionStep;
                            int progress = Math.round(conversionProgress);
                            SwingUtilities.invokeLater(() -> {
                                PDFMerge.this.progressBar.setValue(progress);
                            });
                        }

                        SwingUtilities.invokeLater(() -> {
                            this.progressBar.setIndeterminate(true);
                        });
                        inputObjects[i] = LosslessFactory.createFromImage(outputDocument, outputImage);
                        SwingUtilities.invokeLater(() -> {
                            this.progressBar.setIndeterminate(false);
                        });
                    } else {
                        inputObjects[i] = PDImageXObject.createFromFileByContent(f, outputDocument);
                    }
                }
                currentProgress += progressStep;
                int progress = Math.round(currentProgress);
                SwingUtilities.invokeLater(() -> {
                    PDFMerge.this.progressBar.setValue(progress);
                });
            }

            for (Object inputObject : inputObjects) {
                if (inputObject instanceof PDDocument e) {
                    utility.appendDocument(outputDocument, e);
                    e.close();
                }
                if (inputObject instanceof PDImageXObject img) {
                    try (PDDocument doc = new PDDocument()) {
                        PDPage page = new PDPage(PDRectangle.A4);
                        doc.addPage(page);

                        PDRectangle crop = page.getCropBox();

                        float cmToPdfUnit = (1f / 2.54f) / (1f / 72f);

                        float topMargin = margin.getTop() * cmToPdfUnit;
                        float bottomMargin = margin.getBottom() * cmToPdfUnit;
                        float leftMargin = margin.getLeft() * cmToPdfUnit;
                        float rightMargin = margin.getRight() * cmToPdfUnit;

                        float widthMargin = crop.getWidth() - (leftMargin + rightMargin);
                        float heightMargin = crop.getHeight() - (topMargin + bottomMargin);

                        float imageWidth = img.getWidth();
                        float imageHeight = img.getHeight();

                        fillPage:
                        {
                            if (Upscale.DOWNSCALE_IF_NEEDED.equals(upscaleEnum)) {
                                if (imageWidth < widthMargin && imageHeight < heightMargin) {
                                    break fillPage;
                                }
                            }
                            if (imageWidth == imageHeight) {
                                imageWidth = Math.min(widthMargin, heightMargin);
                                imageHeight = imageWidth;
                                break fillPage;
                            }
                            for (int i = 0; i < 2; i++) {
                                float distWidth = imageWidth - widthMargin;
                                float distHeight = imageHeight - heightMargin;
                                float scale = (distWidth > distHeight
                                        ? widthMargin / imageWidth
                                        : heightMargin / imageHeight);
                                imageWidth *= scale;
                                imageHeight *= scale;
                            }
                        }

                        float x = leftMargin;
                        float y = bottomMargin;

                        x += (widthMargin / 2f);
                        y += (heightMargin / 2f);

                        x -= (imageWidth / 2f);
                        y -= (imageHeight / 2f);

                        try (PDPageContentStream stream = new PDPageContentStream(doc, page)) {
                            stream.drawImage(img, x, y, imageWidth, imageHeight);
                        }

                        utility.appendDocument(outputDocument, doc);
                    }
                }
                currentProgress += progressStep;
                int progress = Math.round(currentProgress);
                SwingUtilities.invokeLater(() -> {
                    PDFMerge.this.progressBar.setValue(progress);
                });
            }

            outputDocument.save(outputFile);
            Toolkit.getDefaultToolkit().beep();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton clearAll;
    private javax.swing.JList<String> filesList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<Margin> marginBox;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox<Rotation> rotationBox;
    private javax.swing.JButton save;
    private javax.swing.JComboBox<Upscale> upscaleBox;
    // End of variables declaration//GEN-END:variables
}
